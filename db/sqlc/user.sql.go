// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    email,
    hashed_password,
    full_name
) VALUES (
    $1, $2, $3, $4
) RETURNING username, email, created_at, password_changed_at, hashed_password, full_name
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
		&i.HashedPassword,
		&i.FullName,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, email, created_at, password_changed_at, hashed_password, full_name FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
		&i.HashedPassword,
		&i.FullName,
	)
	return i, err
}
